#ifndef __2048_SND_H__
#define __2048_SND_H__

/* Waveform samples register, no macro/consts defined in gdbk headers */
#define SAMPLE_REG(i) (*(__REG)(0xFF30+(i)))

/* There are 21 8-bit sound registers + 16 8-bit waveform registers
 * This with EOF flag gives us 23 binary flags stored in 3 bytes, 1bit per flag (3x8bits)
 * If the flag is on, the data that will be written to the register follows e.g.
 * "0x03 0x00 0x00 0x99 0x97" will result in "NR10 = 0x99; NR11 = 0x97;"
 */
#define SND_I0_NR10 1
#define SND_I0_NR11 2
#define SND_I0_NR12 4
#define SND_I0_NR13 8
#define SND_I0_NR14 16
#define SND_I0_NR21 32
#define SND_I0_NR22 64
#define SND_I0_NR23 128
#define SND_I1_NR24 1
#define SND_I1_SAMPLE 2
#define SND_I1_NR30 4
#define SND_I1_NR31 8
#define SND_I1_NR32 16
#define SND_I1_NR33 32
#define SND_I1_NR34 64
#define SND_I1_NR41 128
#define SND_I2_NR42 1
#define SND_I2_NR43 2
#define SND_I2_NR44 4
#define SND_I2_NR50 8
#define SND_I2_NR51 16
#define SND_I2_NR52 32
#define SND_I2_EOF  64

/* Sound data pointer */
UINT8* snd;
/* Flags (3 bytes) */
UINT8 snd_i0, snd_i1, snd_i2;

const UINT8 SND[] = {
    0,0,0,6,0,56,128,243,119,243,128,26,0,0,135,131,135,8,0,0,193,0,0,16,255,68,0,0,1,1,0,0,0,250,247,5,128,0,128,135,146,57,135,1,35,86,120,153,152,118,103,154,223,254,201,133,66,17,0,128,32,172,135,58,160,192,64,16,0,1,0,0,0,0,192,176,3,146,45,32,167,41,176,1,64,16,0,1,0,192,176,3,146,33,32,162,58,160,0,128,32,0,6,157,0,0,0,64,144,3,1,0,41,176,1,0,0,0,0,0,16,247,0,128,3,0,0,0,254,129,1,133,98,99,133,134,146,178,134,58,160,0,128,1,0,0,0,0,0,26,0,0,130,198,130,160,241,3,133,99,133,32,178,134,41,176,1,0,128,3,58,160,0,0,0,0,0,0,16,127,164,33,0,1,135,57,135,10,94,96,0,134,98,114,134,1,89,135,0,96,0,99,133,0,0,0,196,224,3,1,146,33,10,134,41,176,1,128,0,0,6,68,224,3,98,1,89,135,58,160,0,192,0,0,146,57,0,0,0,0,0,16,247,68,96,0,1,1,10,134,4,96,0,98,98,135,0,0,0,4,224,3,1,10,134,41,176,1,196,224,3,98,146,6,98,135,58,160,0,128,0,0,33,0,0,16,127,132,96,0,1,57,10,134,64,0,0,1,68,96,0,98,146,107,135,64,0,0,1,0,0,0,196,224,3,1,146,33,10,134,41,176,1,132,224,3,98,6,107,135,58,160,0,0,0,0,0,0,16,247,132,96,0,1,57,10,134,132,96,0,98,68,115,135,0,0,0,0,0,0,132,224,3,1,89,214,134,41,176,1,132,224,3,98,107,115,135,58,160,0,0,0,0,0,0,16,127,68,96,0,1,1,137,134,222,96,0,135,98,6,135,146,6,107,135,0,0,0,4,224,3,1,137,134,41,176,1,164,225,3,98,134,214,134,107,135,58,160,0,0,0,0,0,0,16,247,132,96,0,1,178,114,134,68,96,0,98,1,89,135,224,1,0,135,146,6,135,68,224,3,1,1,114,134,41,176,1,4,224,3,98,89,135,58,160,0,0,0,0,0,0,16,127,228,33,0,1,134,146,137,134,33,128,32,0,178,57,0,0,0,128,160,3,214,68,41,176,1,128,160,3,247,79,58,160,0,0,0,0,64,16,16,1,0,247,236,1,0,98,167,135,146,172,135,0,0,0,0,128,3,41,176,1,0,128,3,58,160,0,0,0,0,0,0,16,127,132,112,0,1,57,32,10,134,94,96,0,134,98,114,134,1,89,135,0,96,0,99,133,196,224,3,1,146,33,10,134,41,176,1,128,0,0,6,68,224,3,98,1,89,135,58,160,0,192,0,0,146,57,0,0,16,247,68,96,0,1,1,10,134,4,96,0,98,98,135,0,0,0,4,224,3,1,10,134,41,176,1,196,224,3,98,146,6,98,135,58,160,0,128,0,0,33,0,0,16,127,132,96,0,1,57,10,134,64,0,0,1,68,96,0,98,146,107,135,64,0,0,1,0,0,0,4,0,0,1,192,224,3,146,33,10,134,41,176,1,132,224,3,98,6,107,135,58,160,0,0,0,0,0,0,16,247,132,0,0,1,107,0,96,0,10,134,132,96,0,98,89,115,135,0,0,0,0,0,0,132,224,3,1,131,214,134,41,176,1,132,224,3,98,57,115,135,58,160,0,128,0,0,33,0,0,16,127,68,96,0,1,1,137,134,222,96,0,135,98,6,135,146,6,107,135,0,0,0,4,224,3,1,137,134,41,176,1,132,224,3,98,33,107,135,58,160,0,0,0,0,0,0,16,247,132,96,0,1,57,114,134,68,96,0,98,1,89,135,192,0,0,146,6,68,224,3,1,1,114,134,41,176,1,4,224,3,98,89,135,58,160,0,0,0,0,0,0,16,127,196,32,0,1,146,68,33,128,32,0,57,57,0,0,0,128,160,3,6,68,41,176,1,128,160,3,33,79,58,160,0,0,0,0,0,0,16,247,64,16,0,1,0,204,0,0,98,167,146,172,68,0,0,1,1,0,0,0,204,128,3,98,79,146,89,41,176,1,0,128,3,58,160,0,0,0,0,0,0,16,127,68,112,0,1,1,32,137,134,204,96,0,98,6,146,107,6,135,0,0,0,136,224,3,33,123,137,134,41,176,1,154,224,3,134,214,134,131,6,135,58,160,0,0,0,0,0,0,16,247,154,96,0,135,33,135,123,114,134,90,96,0,134,178,134,1,6,135,200,0,0,247,146,89,68,96,0,1,1,114,134,0,128,3,41,176,1,12,224,3,98,178,6,135,58,160,0,0,0,0,200,96,16,214,146,68,66,134,127,0,0,0,72,96,0,137,1,107,135,0,0,0,200,224,3,247,146,89,66,134,41,176,1,136,0,0,214,68,72,224,3,66,1,107,135,58,160,0,0,0,0,0,0,16,247,196,32,0,1,146,57,6,64,16,0,1,0,192,48,0,146,68,32,33,64,16,0,1,0,0,0,0,192,176,3,146,79,32,45,41,176,1,64,0,0,1,0,16,0,0,192,176,3,146,89,32,57,58,160,0,64,16,0,1,0,0,0,0,0,0,16,127,0,112,0,32,137,134,222,96,0,135,98,6,135,146,107,6,135,0,0,0,136,224,3,33,123,137,134,41,176,1,154,224,3,134,214,134,131,6,135,58,160,0,0,0,0,0,0,16,247,154,96,0,135,33,135,123,114,134,90,96,0,134,178,134,1,6,135,200,0,0,247,146,89,4,0,0,1,64,224,3,1,114,134,41,176,1,12,224,3,98,178,6,135,58,160,0,0,0,0,0,0,16,127,200,96,0,10,146,151,196,134,128,96,0,144,45,135,0,0,0,68,224,3,1,1,196,134,41,176,1,196,224,3,98,146,131,45,135,58,160,0,0,0,0,0,0,16,247,68,32,0,1,1,89,0,16,0,0,0,16,0,32,0,16,0,0,0,48,0,32,68,0,16,0,0,0,0,0,0,176,3,32,57,41,176,1,0,16,0,0,0,176,3,32,33,58,160,0,0,16,0,0,0,0,0,0,0,16,127,192,112,0,146,57,32,10,134,76,96,0,98,114,1,89,135,0,96,0,99,133,196,224,3,1,146,33,10,134,41,176,1,128,0,0,6,68,224,3,98,1,89,135,58,160,0,192,0,0,146,57,0,0,16,247,68,96,0,1,1,10,134,4,96,0,98,98,135,0,0,0,4,224,3,1,10,134,41,176,1,196,224,3,98,146,6,98,135,58,160,0,128,0,0,33,0,0,16,127,132,96,0,1,57,10,134,64,0,0,1,68,96,0,98,146,107,135,64,0,0,1,0,0,0,196,224,3,1,146,33,10,134,41,176,1,132,224,3,98,6,107,135,58,160,0,0,0,0,0,0,16,247,132,96,0,1,57,10,134,132,96,0,98,68,115,135,0,0,0,132,224,3,1,89,214,134,41,176,1,132,224,3,98,107,115,135,58,160,0,0,0,0,0,0,80,127,
};

/* timer fires 16 times per second, this is the slowest timer interval possible */
void snd_irq() {
    snd_i0 = *snd++;
    snd_i1 = *snd++;
    snd_i2 = *snd++;
    if(snd_i0 & SND_I0_NR10)
        NR10_REG = *snd++;
    if(snd_i0 & SND_I0_NR11)
        NR11_REG = *snd++;
    if(snd_i0 & SND_I0_NR12)
        NR12_REG = *snd++;
    if(snd_i0 & SND_I0_NR13)
        NR13_REG = *snd++;
    if(snd_i0 & SND_I0_NR14)
        NR14_REG = *snd++;
    if(snd_i0 & SND_I0_NR21)
        NR21_REG = *snd++;
    if(snd_i0 & SND_I0_NR22)
        NR22_REG = *snd++;
    if(snd_i0 & SND_I0_NR23)
        NR23_REG = *snd++;
    if(snd_i1 & SND_I1_NR24)
        NR24_REG = *snd++;
    if(snd_i1 & SND_I1_SAMPLE) {
        SAMPLE_REG(0) = *snd++;
        SAMPLE_REG(1) = *snd++;
        SAMPLE_REG(2) = *snd++;
        SAMPLE_REG(3) = *snd++;
        SAMPLE_REG(4) = *snd++;
        SAMPLE_REG(5) = *snd++;
        SAMPLE_REG(6) = *snd++;
        SAMPLE_REG(7) = *snd++;
        SAMPLE_REG(8) = *snd++;
        SAMPLE_REG(9) = *snd++;
        SAMPLE_REG(10) = *snd++;
        SAMPLE_REG(11) = *snd++;
        SAMPLE_REG(12) = *snd++;
        SAMPLE_REG(13) = *snd++;
        SAMPLE_REG(14) = *snd++;
        SAMPLE_REG(15) = *snd++;
    }
    if(snd_i1 & SND_I1_NR30)
        NR30_REG = *snd++;
    if(snd_i1 & SND_I1_NR31)
        NR31_REG = *snd++;
    if(snd_i1 & SND_I1_NR32)
        NR32_REG = *snd++;
    if(snd_i1 & SND_I1_NR33)
        NR33_REG = *snd++;
    if(snd_i1 & SND_I1_NR34)
        NR34_REG = *snd++;    
    if(snd_i1 & SND_I1_NR41)
        NR41_REG = *snd++;
    if(snd_i2 & SND_I2_NR42)
        NR42_REG = *snd++;
    if(snd_i2 & SND_I2_NR43)
        NR43_REG = *snd++;
    if(snd_i2 & SND_I2_NR44)
        NR44_REG = *snd++;
    if(snd_i2 & SND_I2_NR50)
        NR50_REG = *snd++;
    if(snd_i2 & SND_I2_NR51)
        NR51_REG = *snd++;
    if(snd_i2 & SND_I2_NR52)
        NR52_REG = *snd++;
    if(snd_i2 & SND_I2_EOF)
        snd = (UINT8*)&SND[0];
}

/* disable interrupts before, re-enable after */
void snd_irq_enable(UINT8 irq_flags) {
    snd = (UINT8*)&SND[0];
    TMA_REG = 0;
    TAC_REG = 0b00000100;
    add_TIM(snd_irq);
    set_interrupts(irq_flags|TIM_IFLAG);
}

/* disable interrupts before, re-enable after */
void snd_irq_disable(UINT8 irq_flags) {
    remove_TIM(snd_irq);
    set_interrupts(irq_flags);
}

#endif
